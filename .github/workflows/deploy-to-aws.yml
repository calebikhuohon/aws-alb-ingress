on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'

name: Deploy to Amazon

env:
  CLUSTER_NAME: 'ingress-setup-demo'

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '^1.19'

    - name: Build, tag, and push app image to Amazon ECR
      id: build-image
      if: ${{ github.ref == 'refs/heads/main' }}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        echo "docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Setup kubeconfig
      id: setup-kubeconfig
      run: |
        aws eks --region us-west-2 update-kubeconfig --name ${{env.CLUSTER_NAME}}

    - name: Deploy Backend
      id: deploy-backend
      env:
        IMAGE_NAME: ${{ steps.build-image.outputs.image }}
      run: |
        # Upgrade release
        helm upgrade --install rest-server ./deployment/helm-charts/backend \
          --set image.tag=${{ github.sha }} \
          --set image.prod_repository=$IMAGE_NAME
