name: Provision Infrastructure on AWS with Terraform & eksctl

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  CLUSTER_NAME: 'ingress-setup-demo'

jobs:
  infraProvisioning:
    name:  AWS Infrastructure
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Install eksctl
      run: |
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        eksctl version

    - name: Install Kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        mkdir -p ~/.local/bin
        mv ./kubectl ~/.local/bin/kubectl
        kubectl version --client

    - name: Create Kubernetes Cluster
      run: |
        eksctl create cluster --config-file=infrastructure/kubernetes/eksctl.yml

    - name: Setup kubeconfig
      id: setup-kubeconfig
      run: |
        aws eks --region us-east-2 update-kubeconfig --name $

    - name: Setup Cluster Authentication
      run: |
        eksctl create iamidentitymapping \
            --cluster ${{env.CLUSTER_NAME}} \
            --region=$AWS_REGION \
            --arn "$AWS_USER_ARN" \
            --group eks-console-dashboard-restricted-access-group \
            --no-duplicate-arns

    # AWS load balancer controller: https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/deploy/installation/
    - name: Setup ALB ingress controller
      run: |
        eksctl utils associate-iam-oidc-provider --region $AWS_REGION --cluster ${{env.CLUSTER_NAME}} --approve
        curl -o iam-policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.4.7/docs/install/iam_policy.json
        aws iam create-policy --policy-name AWSLoadBalancerControllerIAMPolicy --policy-document file://iam-policy.json
        eksctl create iamserviceaccount \
        --cluster=${{env.CLUSTER_NAME}} \
        --namespace=kube-system \
        --name=aws-load-balancer-controller \
        --attach-policy-arn=$AWS_ARN:policy/AWSLoadBalancerControllerIAMPolicy \
        --override-existing-serviceaccounts \
        --region $AWS_REGION \
        --approve

# terraform infrastructure provisioning. url: https://developer.hashicorp.com/terraform/tutorials/automation/github-actions

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Format
      id: fmt
      run: |
       cd infrastructure/terraform
       terraform fmt -check

    - name: Terraform Init
      id: init
      run: |
        cd infrastructure/terraform
        terraform init

    - name: Terraform Validate
      id: validate
      run: |
        cd infrastructure/terraform
        terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: |
        cd infrastructure/terraform
        terraform plan -no-color -input=false
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd infrastructure/terraform
        terraform apply -auto-approve -input=false


